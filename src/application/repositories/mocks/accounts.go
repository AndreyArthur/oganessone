// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/application/repositories/accounts.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	dtos "github.com/AndreyArthur/oganessone/src/core/dtos"
	entities "github.com/AndreyArthur/oganessone/src/core/entities"
	shared "github.com/AndreyArthur/oganessone/src/core/shared"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountsRepository is a mock of AccountsRepository interface.
type MockAccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepositoryMockRecorder
}

// MockAccountsRepositoryMockRecorder is the mock recorder for MockAccountsRepository.
type MockAccountsRepositoryMockRecorder struct {
	mock *MockAccountsRepository
}

// NewMockAccountsRepository creates a new mock instance.
func NewMockAccountsRepository(ctrl *gomock.Controller) *MockAccountsRepository {
	mock := &MockAccountsRepository{ctrl: ctrl}
	mock.recorder = &MockAccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsRepository) EXPECT() *MockAccountsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountsRepository) Create(data *dtos.AccountDTO) (*entities.AccountEntity, *shared.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(*entities.AccountEntity)
	ret1, _ := ret[1].(*shared.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountsRepositoryMockRecorder) Create(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountsRepository)(nil).Create), data)
}

// FindByEmail mocks base method.
func (m *MockAccountsRepository) FindByEmail(email string) (*entities.AccountEntity, *shared.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*entities.AccountEntity)
	ret1, _ := ret[1].(*shared.Error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockAccountsRepositoryMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockAccountsRepository)(nil).FindByEmail), email)
}

// FindById mocks base method.
func (m *MockAccountsRepository) FindById(id string) (*entities.AccountEntity, *shared.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*entities.AccountEntity)
	ret1, _ := ret[1].(*shared.Error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockAccountsRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockAccountsRepository)(nil).FindById), id)
}

// FindByUsername mocks base method.
func (m *MockAccountsRepository) FindByUsername(username string, caseSensitive bool) (*entities.AccountEntity, *shared.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username, caseSensitive)
	ret0, _ := ret[0].(*entities.AccountEntity)
	ret1, _ := ret[1].(*shared.Error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockAccountsRepositoryMockRecorder) FindByUsername(username, caseSensitive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockAccountsRepository)(nil).FindByUsername), username, caseSensitive)
}

// Save mocks base method.
func (m *MockAccountsRepository) Save(arg0 *entities.AccountEntity) *shared.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*shared.Error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAccountsRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountsRepository)(nil).Save), arg0)
}
