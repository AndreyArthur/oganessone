// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/application/repositories/users.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
        reflect "reflect"

        entities "github.com/AndreyArthur/oganessone/src/core/entities"
        gomock "github.com/golang/mock/gomock"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
        ctrl     *gomock.Controller
        recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
        mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
        mock := &MockUsersRepository{ctrl: ctrl}
        mock.recorder = &MockUsersRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
        return m.recorder
}

// Create mocks base method.
func (m *MockUsersRepository) Create(username, email, password string) (*entities.UserEntity, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Create", username, email, password)
        ret0, _ := ret[0].(*entities.UserEntity)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepositoryMockRecorder) Create(username, email, password interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepository)(nil).Create), username, email, password)
}

// FindByEmail mocks base method.
func (m *MockUsersRepository) FindByEmail(email string) (*entities.UserEntity, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindByEmail", email)
        ret0, _ := ret[0].(*entities.UserEntity)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUsersRepositoryMockRecorder) FindByEmail(email interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUsersRepository)(nil).FindByEmail), email)
}

// FindByUsername mocks base method.
func (m *MockUsersRepository) FindByUsername(username string, caseSensitive bool) (*entities.UserEntity, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindByUsername", username, caseSensitive)
        ret0, _ := ret[0].(*entities.UserEntity)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUsersRepositoryMockRecorder) FindByUsername(username, caseSensitive interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUsersRepository)(nil).FindByUsername), username, caseSensitive)
}

// Save mocks base method.
func (m *MockUsersRepository) Save(arg0 *entities.UserEntity) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Save", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUsersRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUsersRepository)(nil).Save), arg0)
}